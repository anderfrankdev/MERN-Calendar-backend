type Query {
  record(id: ID!): String
  records: String
  getEvents(token:String!): getEventsResponse

  login(email: String!, password: String!): loginOutput

}
type Event {
  id: String
  title: String
  notes: String
  start: String
  end: String
  createdBy: String
}
type EventResponse {
  ok: Boolean
  message: String
  event: Event
}
type getEventsResponse {
  ok: Boolean
  message: String
  events: [Event]
}
type loginOutput {
  ok:Boolean!
  token:String
  message:String
  user:User
}
type Mutation {
  createUser(fullname: String!, email: String!, password: String!): Response
  refreshJwt(token: String!): Response
  createEvent(
    title: String!
    notes: String
    start: String!
    end: String!
    token: String!
  ): EventResponse
  updateEvent(
    title: String
    notes: String
    start: String
    end: String
    token: String!
    id:String!
  ): EventResponse
}
type User {
  id: ID
  fullname: String
  email: String
  events: [Event]
}
scalar Message

type Response {
  ok: Boolean
  user: User
  token: String
  message: Message
}
